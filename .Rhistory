mutate(
AAPI_Imprisonment_Rate = aapi_jail_pop / aapi_pop_15to64,
Black_Imprisonment_Rate = black_jail_pop / black_pop_15to64,
Latinx_Imprisonment_Rate = latinx_jail_pop / latinx_pop_15to64,
Native_Imprisonment_Rate = native_jail_pop / native_pop_15to64,
White_Imprisonment_Rate = white_jail_pop / white_pop_15to64,
Other_Race_Imprisonment_Rate = other_race_jail_pop / total_pop
) %>%
summarize(
Average_AAPI_Imprisonment_Rate = mean(AAPI_Imprisonment_Rate, na.rm = TRUE),
Average_Black_Imprisonment_Rate = mean(Black_Imprisonment_Rate, na.rm = TRUE),
Average_Latinx_Imprisonment_Rate = mean(Latinx_Imprisonment_Rate, na.rm = TRUE),
Average_Native_Imprisonment_Rate = mean(Native_Imprisonment_Rate, na.rm = TRUE),
Average_White_Imprisonment_Rate = mean(White_Imprisonment_Rate, na.rm = TRUE),
Average_Other_Race_Imprisonment_Rate = mean(Other_Race_Imprisonment_Rate, na.rm = TRUE)
)
Average_Prisonment_Races <- df %>%
mutate(
AAPI_Imprisonment_Rate = aapi_jail_pop / aapi_pop_15to64,
Black_Imprisonment_Rate = black_jail_pop / black_pop_15to64,
Latinx_Imprisonment_Rate = latinx_jail_pop / latinx_pop_15to64,
Native_Imprisonment_Rate = native_jail_pop / native_pop_15to64,
White_Imprisonment_Rate = white_jail_pop / white_pop_15to64,
Other_Race_Imprisonment_Rate = other_race_jail_pop / total_pop
) %>%
summarize(
Average_AAPI_Imprisonment_Rate = mean(AAPI_Imprisonment_Rate, na.rm = TRUE),
Average_Black_Imprisonment_Rate = mean(Black_Imprisonment_Rate, na.rm = TRUE),
Average_Latinx_Imprisonment_Rate = mean(Latinx_Imprisonment_Rate, na.rm = TRUE),
Average_Native_Imprisonment_Rate = mean(Native_Imprisonment_Rate, na.rm = TRUE),
Average_White_Imprisonment_Rate = mean(White_Imprisonment_Rate, na.rm = TRUE),
Average_Other_Race_Imprisonment_Rate = mean(Other_Race_Imprisonment_Rate, na.rm = TRUE)
)Average_Prisonment_Races <- df %>%
Average_Prisonment_Races <- df %>%
mutate(
AAPI_Imprisonment_Rate = aapi_jail_pop / aapi_pop_15to64,
Black_Imprisonment_Rate = black_jail_pop / black_pop_15to64,
Latinx_Imprisonment_Rate = latinx_jail_pop / latinx_pop_15to64,
Native_Imprisonment_Rate = native_jail_pop / native_pop_15to64,
White_Imprisonment_Rate = white_jail_pop / white_pop_15to64,
Other_Race_Imprisonment_Rate = other_race_jail_pop / total_pop
) %>%
summarize(
Average_AAPI_Imprisonment_Rate = mean(AAPI_Imprisonment_Rate, na.rm = TRUE),
Average_Black_Imprisonment_Rate = mean(Black_Imprisonment_Rate, na.rm = TRUE),
Average_Latinx_Imprisonment_Rate = mean(Latinx_Imprisonment_Rate, na.rm = TRUE),
Average_Native_Imprisonment_Rate = mean(Native_Imprisonment_Rate, na.rm = TRUE),
Average_White_Imprisonment_Rate = mean(White_Imprisonment_Rate, na.rm = TRUE),
Average_Other_Race_Imprisonment_Rate = mean(Other_Race_Imprisonment_Rate, na.rm = TRUE)
)
Average_Prisonment_Races <- df %>%
mutate(
AAPI_Imprisonment_Rate = aapi_jail_pop / aapi_pop_15to64,
Black_Imprisonment_Rate = black_jail_pop / black_pop_15to64,
Latinx_Imprisonment_Rate = latinx_jail_pop / latinx_pop_15to64,
Native_Imprisonment_Rate = native_jail_pop / native_pop_15to64,
White_Imprisonment_Rate = white_jail_pop / white_pop_15to64,
Other_Race_Imprisonment_Rate = other_race_jail_pop / total_pop
) %>%
summarize(
Average_AAPI_Imprisonment_Rate = mean(AAPI_Imprisonment_Rate, na.rm = TRUE),
Average_Black_Imprisonment_Rate = mean(Black_Imprisonment_Rate, na.rm = TRUE),
Average_Latinx_Imprisonment_Rate = mean(Latinx_Imprisonment_Rate, na.rm = TRUE),
Average_Native_Imprisonment_Rate = mean(Native_Imprisonment_Rate, na.rm = TRUE),
Average_White_Imprisonment_Rate = mean(White_Imprisonment_Rate, na.rm = TRUE),
Average_Other_Race_Imprisonment_Rate = mean(Other_Race_Imprisonment_Rate, na.rm = TRUE)
)
Average_Prisonment_Races <- df %>%
mutate(
AAPI_Imprisonment_Rate = aapi_jail_pop / aapi_pop_15to64,
Black_Imprisonment_Rate = black_jail_pop / black_pop_15to64,
Latinx_Imprisonment_Rate = latinx_jail_pop / latinx_pop_15to64,
Native_Imprisonment_Rate = native_jail_pop / native_pop_15to64,
White_Imprisonment_Rate = white_jail_pop / white_pop_15to64,
Other_Race_Imprisonment_Rate = other_race_jail_pop / total_pop
) %>%
summarize(
Average_AAPI_Imprisonment_Rate = mean(AAPI_Imprisonment_Rate, na.rm = TRUE),
Average_Black_Imprisonment_Rate = mean(Black_Imprisonment_Rate, na.rm = TRUE),
Average_Latinx_Imprisonment_Rate = mean(Latinx_Imprisonment_Rate, na.rm = TRUE),
Average_Native_Imprisonment_Rate = mean(Native_Imprisonment_Rate, na.rm = TRUE),
Average_White_Imprisonment_Rate = mean(White_Imprisonment_Rate, na.rm = TRUE),
Average_Other_Race_Imprisonment_Rate = mean(Other_Race_Imprisonment_Rate, na.rm = TRUE)
)
Average_Prisonment_Races <- df %>%
mutate(
AAPI_Imprisonment_Rate = aapi_jail_pop / aapi_pop_15to64,
Black_Imprisonment_Rate = black_jail_pop / black_pop_15to64,
Latinx_Imprisonment_Rate = latinx_jail_pop / latinx_pop_15to64,
Native_Imprisonment_Rate = native_jail_pop / native_pop_15to64,
White_Imprisonment_Rate = white_jail_pop / white_pop_15to64,
Other_Race_Imprisonment_Rate = other_race_jail_pop / total_pop
) %>%
summarize(
Average_AAPI_Imprisonment_Rate = mean(AAPI_Imprisonment_Rate, na.rm = TRUE),
Average_Black_Imprisonment_Rate = mean(Black_Imprisonment_Rate, na.rm = TRUE),
Average_Latinx_Imprisonment_Rate = mean(Latinx_Imprisonment_Rate, na.rm = TRUE),
Average_Native_Imprisonment_Rate = mean(Native_Imprisonment_Rate, na.rm = TRUE),
Average_White_Imprisonment_Rate = mean(White_Imprisonment_Rate, na.rm = TRUE),
Average_Other_Race_Imprisonment_Rate = mean(Other_Race_Imprisonment_Rate, na.rm = TRUE)
)
Average_Prisonment_Races <- df %>%
mutate(
AAPI_Imprisonment_Rate = aapi_jail_pop / aapi_pop_15to64,
Black_Imprisonment_Rate = black_jail_pop / black_pop_15to64,
Latinx_Imprisonment_Rate = latinx_jail_pop / latinx_pop_15to64,
Native_Imprisonment_Rate = native_jail_pop / native_pop_15to64,
White_Imprisonment_Rate = white_jail_pop / white_pop_15to64,
Other_Race_Imprisonment_Rate = other_race_jail_pop / total_pop
) %>%
summarize(
Average_AAPI_Imprisonment_Rate = mean(AAPI_Imprisonment_Rate, na.rm = TRUE),
Average_Black_Imprisonment_Rate = mean(Black_Imprisonment_Rate, na.rm = TRUE),
Average_Latinx_Imprisonment_Rate = mean(Latinx_Imprisonment_Rate, na.rm = TRUE),
Average_Native_Imprisonment_Rate = mean(Native_Imprisonment_Rate, na.rm = TRUE),
Average_White_Imprisonment_Rate = mean(White_Imprisonment_Rate, na.rm = TRUE),
Average_Other_Race_Imprisonment_Rate = mean(Other_Race_Imprisonment_Rate, na.rm = TRUE)
)
Average_Prisonment_Races <- df %>%
mutate(
AAPI_Imprisonment_Rate = aapi_jail_pop / aapi_pop_15to64,
Black_Imprisonment_Rate = black_jail_pop / black_pop_15to64,
Latinx_Imprisonment_Rate = latinx_jail_pop / latinx_pop_15to64,
Native_Imprisonment_Rate = native_jail_pop / native_pop_15to64,
White_Imprisonment_Rate = white_jail_pop / white_pop_15to64,
Other_Race_Imprisonment_Rate = other_race_jail_pop / total_pop
) %>%
summarize(
Average_AAPI_Imprisonment_Rate = mean(AAPI_Imprisonment_Rate, na.rm = TRUE),
Average_Black_Imprisonment_Rate = mean(Black_Imprisonment_Rate, na.rm = TRUE),
Average_Latinx_Imprisonment_Rate = mean(Latinx_Imprisonment_Rate, na.rm = TRUE),
Average_Native_Imprisonment_Rate = mean(Native_Imprisonment_Rate, na.rm = TRUE),
Average_White_Imprisonment_Rate = mean(White_Imprisonment_Rate, na.rm = TRUE),
Average_Other_Race_Imprisonment_Rate = mean(Other_Race_Imprisonment_Rate, na.rm = TRUE)
)
Average_Prisonment_Races <- df %>%
mutate(
AAPI_Imprisonment_Rate = aapi_jail_pop / aapi_pop_15to64,
Black_Imprisonment_Rate = black_jail_pop / black_pop_15to64,
Latinx_Imprisonment_Rate = latinx_jail_pop / latinx_pop_15to64,
Native_Imprisonment_Rate = native_jail_pop / native_pop_15to64,
White_Imprisonment_Rate = white_jail_pop / white_pop_15to64,
Other_Race_Imprisonment_Rate = other_race_jail_pop / total_pop
) %>%
summarize(
Average_AAPI_Imprisonment_Rate = mean(AAPI_Imprisonment_Rate, na.rm = TRUE),
Average_Black_Imprisonment_Rate = mean(Black_Imprisonment_Rate, na.rm = TRUE),
Average_Latinx_Imprisonment_Rate = mean(Latinx_Imprisonment_Rate, na.rm = TRUE),
Average_Native_Imprisonment_Rate = mean(Native_Imprisonment_Rate, na.rm = TRUE),
Average_White_Imprisonment_Rate = mean(White_Imprisonment_Rate, na.rm = TRUE),
Average_Other_Race_Imprisonment_Rate = mean(Other_Race_Imprisonment_Rate, na.rm = TRUE)
)
Highest_County <- df %>%
filter(total_jail_pop == max(total_jail_pop)) %>%
select(county_name, total_jail_pop)
print(Highest_County)
max_jail_population <- max(df$total_jail_pop, na.rm = TRUE)
# Check if any rows match the maximum jail population
matching_counties <- df %>%
filter(total_jail_pop == max_jail_population)
# Print the result
print(matching_counties)
max_index <- which.max(df$total_jail_pop)
# Retrieve the county with the highest jail population
Highest_County <- df[max_index, c("county_name", "total_jail_pop")]
# Print the county with the highest jail population
print(Highest_County)
max_index <- which.max(df$total_jail_pop)
Highest_County <- df[max_index, c("county_name", "total_jail_pop")]
print(Highest_County)
min_index <- which.min(df$total_jail_pop)
Lowest_County <- df[min_index, c("county_name", "total_jail_pop")]
min_index <- which.min(df$total_jail_pop)
Lowest_County <- df[min_index, c("county_name", "total_jail_pop")]
min_index <- which.min(df$total_jail_pop)
Lowest_County <- df[min_index, c("county_name", "total_jail_pop")]
min_index <- which.min(df$total_jail_pop)
Lowest_County <- df[min_index, c("county_name", "total_jail_pop")]
min_index <- which.min(df$total_jail_pop)
max_index <- which.max(df$total_jail_pop)
max_index <- which.max(df$total_jail_pop)
Highest_County <- df[max_index, c("county_name", "total_jail_pop")]
max_index <- which.max(df$total_jail_pop)
max_index <- which.max(df$total_jail_pop)
Highest_County <- df[max_index, c("county_name", "total_jail_pop")]
Highest_County: Los Angeles County, 23467.19 Total Pop.
max_index <- which.max(df$total_jail_pop)
Highest_County <- df[max_index, c("county_name", "total_jail_pop")]
mutate(
AAPI_Imprisonment_Rate = aapi_jail_pop / aapi_pop_15to64,
Black_Imprisonment_Rate = black_jail_pop / black_pop_15to64,
Latinx_Imprisonment_Rate = latinx_jail_pop / latinx_pop_15to64,
Native_Imprisonment_Rate = native_jail_pop / native_pop_15to64,
White_Imprisonment_Rate = white_jail_pop / white_pop_15to64,
Other_Race_Imprisonment_Rate = other_race_jail_pop / total_pop
) %>%
summarize(
Average_AAPI_Imprisonment_Rate = mean(AAPI_Imprisonment_Rate, na.rm = TRUE),
Average_Black_Imprisonment_Rate = mean(Black_Imprisonment_Rate, na.rm = TRUE),
Average_Latinx_Imprisonment_Rate = mean(Latinx_Imprisonment_Rate, na.rm = TRUE),
Average_Native_Imprisonment_Rate = mean(Native_Imprisonment_Rate, na.rm = TRUE),
Average_White_Imprisonment_Rate = mean(White_Imprisonment_Rate, na.rm = TRUE),
Average_Other_Race_Imprisonment_Rate = mean(Other_Race_Imprisonment_Rate, na.rm = TRUE)
)
# Find the index of the row with the minimum jail population
min_index <- which.min(df$total_jail_pop)
# Retrieve the county with the lowest jail population
Lowest_County <- df[min_index, c("county_name", "total_jail_pop")]
# Print the county with the lowest jail population
print(Lowest_County)
Average_Prison_Rate_Black <- df %>%
group_by(county_name) %>%
summarize(Average_Prison_Rate_Black = mean(black_jail_pop / black_pop_15to64, na.rm = TRUE))
# Print the result
print(Average_Prison_Rate_Black)
Overall_Average_Prison_Rate_Black <- mean(df$black_jail_pop / df$black_pop_15to64, na.rm = TRUE)
# Print the result
print(Overall_Average_Prison_Rate_Black)
df_filtered <- df %>%
filter(black_pop_15to64 != 0)
# Calculate the overall average prison rate for Black people
Overall_Average_Prison_Rate_Black <- mean(df_filtered$black_jail_pop / df_filtered$black_pop_15to64)
# Print the result
print(Overall_Average_Prison_Rate_Black)
Total_Black_Jail <- sum(df$black_jail_pop, na.rm = TRUE)
# Print the result
print(Total_Black_Jail)
Total_Black_Jail <- sum(df$black_jail_pop, na.rm = TRUE)
print(Total_Black_Jail)
Total_White_Jail <- sum(df$white_jail_pop, na.rm = TRUE)
print(Total_White_Jail)
Average_Prisonment_Rates_White <- mean(df$white_jail_pop / df$white_pop_15to64, na.rm = TRUE)
print(Average_Prisonment_Rates_White)
# Load the required library
library(dplyr)
# Calculate the average jail population for White individuals per county
Average_White_Jail_Population_Per_County <- df %>%
group_by(county_name) %>%
summarize(Average_White_Jail_Population = mean(white_jail_pop, na.rm = TRUE))
# Print the result
print(Average_White_Jail_Population_Per_County)
Total_Average_White_Jail_Population <- mean(df$white_jail_pop, na.rm = TRUE)
# Print the result
print(Total_Average_White_Jail_Population)
Total_Average_black_Jail_Population <- mean(df$black_jail_pop, na.rm = TRUE)
# Calculate the average imprisonment rate for Black individuals across all counties
Average_Prisonment_Races_Black <- mean(df$black_jail_pop / df$black_pop_15to64, na.rm = TRUE)
# Print the result
print(Average_Prisonment_Races_Black)
# Calculate the total jail population
total_jail_population <- sum(df$total_jail_pop, na.rm = TRUE)
# Calculate the jail population for Black individuals
black_jail_population <- sum(df$black_jail_pop, na.rm = TRUE)
# Calculate the jail population for White individuals
white_jail_population <- sum(df$white_jail_pop, na.rm = TRUE)
# Calculate the proportion of imprisonment for Black individuals
proportion_black <- black_jail_population / total_jail_population
# Calculate the proportion of imprisonment for White individuals
proportion_white <- white_jail_population / total_jail_population
# Print the results
print(paste("Proportion of Imprisonment for Black individuals:", proportion_black))
print(paste("Proportion of Imprisonment for White individuals:", proportion_white))
white_jail_population <- sum(df$white_jail_pop, na.rm = TRUE)
proportion_white <- white_jail_population / total_jail_population
print(paste("Proportion of Imprisonment for White individuals:", proportion_white))
total_jail_population <- sum(df$total_jail_pop, na.rm = TRUE)
black_jail_population <- sum(df$black_jail_pop, na.rm = TRUE)
proportion_black <- black_jail_population / total_jail_population
print(paste("Proportion of Imprisonment for Black individuals:", proportion_black))
library(ggplot2)
# Filter the data for Black and White individuals
df_black <- df[df$race == "Black", ]
df_white <- df[df$race == "White", ]
# Create the ggplot object
ggplot() +
# Add lines for Black and White incarceration rates over time
geom_line(data = df_black, aes(x = year, y = incarceration_rate, color = "Black")) +
geom_line(data = df_white, aes(x = year, y = incarceration_rate, color = "White")) +
# Add labels and title
labs(x = "Year", y = "Incarceration Rate", color = "Racial Group", title = "Trend of Incarceration Rates by Race Over Time") +
# Add a legend
scale_color_manual(values = c("Black" = "black", "White" = "blue"),
name = "Racial Group",
labels = c("Black", "White"))
library(ggplot2)
# Filter the data for Black and White individuals
df_black <- df[df$race == "Black", ]
df_white <- df[df$race == "White", ]
# Create the ggplot object
ggplot() +
# Add lines for Black and White incarceration rates over time
geom_line(data = df_black, aes(x = year, y = incarceration_rate, color = "Black")) +
geom_line(data = df_white, aes(x = year, y = incarceration_rate, color = "White")) +
# Add labels and title
labs(x = "Year", y = "Incarceration Rate", color = "Racial Group", title = "Trend of Incarceration Rates by Race Over Time") +
# Add a legend
scale_color_manual(values = c("Black" = "black", "White" = "blue"),
name = "Racial Group",
labels = c("Black", "White"))
library(ggplot2)
# Filter the data for Black and White individuals
df_black <- df[df$race == "Black", ]
df_white <- df[df$race == "White", ]
# Create the ggplot object
ggplot() +
library(ggplot2)
ggplot(df, aes(x = total_pop, y = total_jail_pop)) +
# Add points for each county
geom_point() +
# Add labels and title
labs(x = "Total Population", y = "Total Jail Population", title = "Relationship between Total Population and Jail Population by County")
ggplot() +
# Add lines for Black and White incarceration rates over time
geom_line(data = df_black, aes(x = year, y = incarceration_rate, color = "Black")) +
geom_line(data = df_white, aes(x = year, y = incarceration_rate, color = "White")) +
# Add labels and title
labs(x = "Year", y = "Incarceration Rate", color = "Racial Group", title = "Trend of Incarceration Rates by Race Over Time") +
# Add a legend
scale_color_manual(values = c("Black" = "black", "White" = "blue"),
name = "Racial Group",
labels = c("Black", "White"))
# Create the ggplot object
ggplot(df, aes(x = total_pop, y = total_jail_pop)) +
# Add points for each county
geom_point() +
# Add labels and title
labs(x = "Total Population", y = "Total Jail Population", title = "Relationship between Total Population and Jail Population by Countyggplot(df, aes(x = total_pop, y = total_jail_pop)) +
# Add points for each county
geom_point() +
# Add labels and title
labs(x = "Total Population", y = "Total Jail Population", title = "Relationship between Total Population and Jail Population by County")
ggplot(df, aes(x = total_pop, y = total_jail_pop)) +
# Add points for each county
geom_point() +
# Add labels and title
labs(x = "Total Population", y = "Total Jail Population", title = "Relationship between Total Population and Jail Population by County")
ggplot(df, aes(x = total_pop, y = total_jail_pop)) +
# Add points for each county
geom_point() +
# Add labels and title
labs(x = "Total Population", y = "Total Jail Population", title = "Relationship between Total Population and Jail Population by County")
ggplot(df, aes(x = total_pop, y = total_jail_pop)) +
# Add points for each county
geom_point() +
# Add labels and title
labs(x = "Total Population", y = "Total Jail Population", title = "Relationship between Total Population and Jail Population by County")
ggplot(df, aes(x = total_pop, y = total_jail_pop)) +
# Add points for each county
geom_point() +
# Add labels and title
labs(x = "Total Population", y = "Total Jail Population", title = "Relationship between Total Population and Jail Population by County")
# Load necessary libraries
library(ggplot2)
library(usmap)
# Load necessary libraries
library(ggplot2)
library(maps)
# Create the choropleth map
ggplot(map_df, aes(x = long, y = lat, group = group, fill = total_jail_pop)) +
geom_polygon(color = "black") +
scale_fill_viridis_c(name = "Total Jail Population", label = scales::comma) +
labs(title = "Distribution of Total Jail Population Across US Counties")
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Download map data for US counties
us_counties <- maps::map_data("county")
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Assuming 'df' is your dataframe containing the data
# Filter data for Black and White individuals
df_black <- df[df$race == "Black", ]
df_white <- df[df$race == "White", ]
# Create the Trends Over Time Chart
ggplot() +
geom_line(data = df_black, aes(x = year, y = total_jail_pop, color = "Black")) +
geom_line(data = df_white, aes(x = year, y = total_jail_pop, color = "White")) +
labs(title = "Trends Over Time: Total Jail Population for Black and White Individuals",
x = "Year",
y = "Total Jail Population",
color = "Race") +
scale_color_manual(values = c("Black" = "black", "White" = "blue"),
labels = c("Black", "White"))
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Assuming 'df' is your dataframe containing the data
# Filter data for Black and White individuals
df_black <- df[df$race == "Black", ]
df_white <- df[df$race == "White", ]
# Create the Trends Over Time Chart
ggplot() +
geom_line(data = df_black, aes(x = year, y = total_jail_pop, color = "Black")) +
geom_line(data = df_white, aes(x = year, y = total_jail_pop, color = "White")) +
labs(title = "Trends Over Time: Total Jail Population for Black and White Individuals",
x = "Year",
y = "Total Jail Population",
color = "Race") +
scale_color_manual(values = c("Black" = "black", "White" = "blue"),
labels = c("Black", "White"),
guide = guide_legend(title = "Race"))
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Assuming 'df' is your dataframe containing the data
# Filter data for Black and White individuals
df_black <- df[df$race == "Black", ]
df_white <- df[df$race == "White", ]
# Create the Trends Over Time Chart
ggplot() +
geom_line(data = df_black, aes(x = year, y = total_jail_pop, color = "Black")) +
geom_line(data = df_white, aes(x = year, y = total_jail_pop, color = "White")) +
labs(title = "Trends Over Time: Total Jail Population for Black and White Individuals",
x = "Year",
y = "Total Jail Population",
color = "Race") +
scale_color_manual(values = c("Black" = "black", "White" = "blue"),
labels = c("Black", "White"),
guide = guide_legend(title = "Race"))
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Assuming 'df' is your dataframe containing the data
# Filter data for Black and White individuals
df_black <- df[df$race == "Black", ]
df_white <- df[df$race == "White", ]
# Create the Trends Over Time Chart
ggplot() +
geom_line(data = df_black, aes(x = year, y = total_jail_pop, color = "Black")) +
geom_line(data = df_white, aes(x = year, y = total_jail_pop, color = "White")) +
labs(title = "Trends Over Time: Total Jail Population for Black and White Individuals",
x = "Year",
y = "Total Jail Population",
color = "Race") +
scale_color_manual(values = c("Black" = "black", "White" = "grey"),
labels = c("Black", "White"),
guide = guide_legend(title = "Race"))
ggplot(map_df, aes(x = long, y = lat, group = group, fill = total_jail_pop)) +
geom_polygon(color = "black") +
scale_fill_viridis_c(name = "Total Jail Population", label = scales::comma) +
labs(title = "Distribution of Total Jail Population Across US Counties")
ggplot(map_df, aes(x = long, y = lat, group = group, fill = total_jail_pop)) +
geom_polygon(color = "black") +
scale_fill_viridis_c(name = "Total Jail Population", label = scales::comma) +
labs(title = "Distribution of Total Jail Population Across US Counties")
map_df <- merge(us_counties, df, by.x = c("region", "subregion"), by.y = c("region", "county_name"), all.x = TRUE)
map_df <- merge(us_counties, df, by.x = c("region", "subregion"), by.y = c("region", "county_name"), all.x = TRUE)
ggplot(df, aes(x = total_pop, y = total_jail_pop)) +
# Add points for each county
geom_point() +
# Add labels and title
labs(x = "Total Population", y = "Total Jail Population", title = "Relationship between Total Population and Jail Population by County")
p2 <- ggplot(df, aes(x = total_pop, y = total_jail_pop)) +
# Add points for each county
geom_point() +
# Add labels and title
labs(x = "Total Population", y = "Total Jail Population", title = "Relationship between Total Population and Jail Population by County")
print(p2)
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Download map data for US counties
us_counties <- maps::map_data("county")
library(ggplot2)
library(dplyr)
# Download map data for US counties
us_counties <- maps::map_data("county")
library(ggplot2)
library(dplyr)
# Download map data for US counties
us_counties <- maps::map_data("county")
install.packages("maps")
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Download map data for US counties
us_counties <- maps::map_data("county")
library(ggplot2)
library(dplyr)
# Load the county dataset from the maps package
data(county, package = "maps")
# Merge map data with jail population data
map_df <- merge(county, df, by.x = c("region", "subregion"), by.y = c("region", "county_name"), all.x = TRUE)
library(ggplot2)
library(dplyr)
# Assuming your data frame is named 'df'
# Load the county dataset from the maps package
data(county, package = "maps")
# Merge map data with jail population data
map_df <- merge(county, df, by.x = c("fips"), by.y = c("fips"), all.x = TRUE)
library(ggplot2)
library(dplyr)
library(usmap)
install.packages("usmaps")
install.packages("maps")
install.packages("maps")
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Download map data for US counties
us_counties <- maps::map_data("county")
library(ggplot2)
library(dplyr)
library(usmap)
library(ggplot2)
library(dplyr)
library(sf)
library(ggplot2)
library(dplyr)
library(sf)
insall.package("sf")
